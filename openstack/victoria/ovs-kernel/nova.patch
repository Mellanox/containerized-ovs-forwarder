diff --git a/nova/network/os_vif_util.py b/nova/network/os_vif_util.py
index 0bfd87bb1e..1dbb469667 100644
--- a/nova/network/os_vif_util.py
+++ b/nova/network/os_vif_util.py
@@ -26,6 +26,7 @@ from nova import exception
 from nova.i18n import _
 from nova.network import model
 
+from vif_plug_ovs import linux_net as os_vif_linux_net
 
 LOG = logging.getLogger(__name__)
 CONF = cfg.CONF
@@ -326,8 +327,19 @@ def _nova_to_osvif_vif_bridge(vif):
 
 # VIF_TYPE_OVS = 'ovs'
 def _nova_to_osvif_vif_ovs(vif):
-    vif_name = _get_vif_name(vif)
+    vif_name = ""
     vnic_type = vif.get('vnic_type', model.VNIC_TYPE_NORMAL)
+    if vnic_type == model.VNIC_TYPE_VIRTIO_FORWARDER:
+        # set the vif_name to be the vf representor device,
+        # as it will be target_dev of vdpa ports in the xml file
+        pci_slot = vif["profile"]['pci_slot']
+        vf_num = os_vif_linux_net.get_vf_num_by_pci_address(pci_slot)
+        pf_ifname = os_vif_linux_net.get_ifname_by_pci_address(
+            pci_slot, pf_interface=True, switchdev=True)
+        vif_name = os_vif_linux_net.get_representor_port(pf_ifname, vf_num)
+    else:
+        vif_name = _get_vif_name(vif)
+
     profile = objects.vif.VIFPortProfileOpenVSwitch(
         interface_id=vif.get('ovs_interfaceid') or vif['id'],
         datapath_type=vif['details'].get(
@@ -338,6 +350,21 @@ def _nova_to_osvif_vif_ovs(vif):
             port_profile=_get_ovs_representor_port_profile(vif),
             plugin="ovs")
         _set_representor_datapath_offload_settings(vif, obj)
+
+    # Add support for virtio_forwrder port
+    elif vnic_type == model.VNIC_TYPE_VIRTIO_FORWARDER:
+        obj = _get_vif_instance(
+            vif,
+            objects.vif.VIFVHostUser,
+            port_profile=_get_ovs_representor_port_profile(vif),
+            plugin="ovs",
+            vif_name=vif_name)
+        _set_representor_datapath_offload_settings(vif, obj)
+        obj.mode="server"
+        obj.path=("/var/lib/vhost_sockets/sock%s" % vif['id'])[:39]
+        if vif["network"]["bridge"] is not None:
+            obj.network.bridge = vif["network"]["bridge"]
+
     elif vif.is_hybrid_plug_enabled():
         obj = _get_vif_instance(
             vif,
diff --git a/nova/virt/libvirt/config.py b/nova/virt/libvirt/config.py
index ea525648b3..6ee809aabf 100644
--- a/nova/virt/libvirt/config.py
+++ b/nova/virt/libvirt/config.py
@@ -1689,6 +1689,8 @@ class LibvirtConfigGuestInterface(LibvirtConfigGuestDevice):
         self.vlan = None
         self.device_addr = None
         self.mtu = None
+        self.vhost_net_alias = ''
+        self.vdpa = False
 
     def __eq__(self, other):
         if not isinstance(other, LibvirtConfigGuestInterface):
@@ -1741,6 +1743,9 @@ class LibvirtConfigGuestInterface(LibvirtConfigGuestDevice):
                 drv_elem.set('rx_queue_size', str(self.vhost_rx_queue_size))
             if self.vhost_tx_queue_size is not None:
                 drv_elem.set('tx_queue_size', str(self.vhost_tx_queue_size))
+            if self.vdpa:
+                drv_elem.set('page_per_vq', 'on')
+                dev.append(etree.Element("mtu", size=str(self.mtu)))
 
             if (drv_elem.get('name') or drv_elem.get('queues') or
                 drv_elem.get('rx_queue_size') or
@@ -1773,6 +1778,9 @@ class LibvirtConfigGuestInterface(LibvirtConfigGuestDevice):
             dev.append(etree.Element("source", type=self.vhostuser_type,
                                      mode=self.vhostuser_mode,
                                      path=self.vhostuser_path))
+            if self.vdpa and self.vhost_net_alias:
+                dev.append(etree.Element("alias", name=self.vhost_net_alias))
+
         elif self.net_type == "bridge":
             dev.append(etree.Element("source", bridge=self.source_dev))
             if self.script is not None:
diff --git a/nova/virt/libvirt/designer.py b/nova/virt/libvirt/designer.py
index 3677ed5280..7fa6f288eb 100644
--- a/nova/virt/libvirt/designer.py
+++ b/nova/virt/libvirt/designer.py
@@ -133,7 +133,8 @@ def set_vif_host_backend_direct_config(conf, devname, mode="passthrough"):
 
 
 def set_vif_host_backend_vhostuser_config(conf, mode, path, rx_queue_size,
-                                          tx_queue_size, tapname=None):
+                                          tx_queue_size, tapname=None,
+                                          net_alias=None, vdpa=False):
     """Populate a LibvirtConfigGuestInterface instance
     with host backend details for vhostuser socket.
 
@@ -149,7 +150,9 @@ def set_vif_host_backend_vhostuser_config(conf, mode, path, rx_queue_size,
         conf.vhost_tx_queue_size = tx_queue_size
     if tapname:
         conf.target_dev = tapname
-
+    if vdpa:
+        conf.vdpa = True
+        conf.vhost_net_alias = net_alias
 
 def set_vif_mtu_config(conf, mtu):
     """Populate a LibvirtConfigGuestInterface instance
diff --git a/nova/virt/libvirt/vif.py b/nova/virt/libvirt/vif.py
index 5c87223baf..2b44b90daa 100644
--- a/nova/virt/libvirt/vif.py
+++ b/nova/virt/libvirt/vif.py
@@ -453,16 +453,21 @@ class LibvirtGenericVIFDriver(object):
         conf.target_dev = vif.vif_name
         self._set_config_VIFPortProfile(instance, vif, conf)
 
-    def _set_config_VIFVHostUser(self, instance, vif, conf):
+    def _set_config_VIFVHostUser(self, instance, vif, conf, vnic_type=""):
         # TODO(sahid): We should never configure a driver backend for
         # vhostuser interface. Specifically override driver to use
         # None. This can be removed when get_base_config will be fixed
         # and rewrite to set the correct backend.
         conf.driver_name = None
-
-        designer.set_vif_host_backend_vhostuser_config(
-            conf, vif.mode, vif.path, CONF.libvirt.rx_queue_size,
-            CONF.libvirt.tx_queue_size, vif.vif_name)
+        if vnic_type == network_model.VNIC_TYPE_VIRTIO_FORWARDER:
+            net_alias = "ua-vdpa-%s" % vif.id[:12]
+            designer.set_vif_host_backend_vhostuser_config(
+                conf, vif.mode, vif.path, CONF.libvirt.rx_queue_size,
+                CONF.libvirt.tx_queue_size, vif.vif_name, net_alias, vdpa=True)
+        else:
+            designer.set_vif_host_backend_vhostuser_config(
+                conf, vif.mode, vif.path, CONF.libvirt.rx_queue_size,
+                CONF.libvirt.tx_queue_size, vif.vif_name)
 
     def _set_config_VIFHostDevice(self, instance, vif, conf):
         if vif.dev_type == osv_fields.VIFHostDeviceDevType.ETHERNET:
@@ -520,7 +525,7 @@ class LibvirtGenericVIFDriver(object):
         elif isinstance(vif, osv_vifs.VIFOpenVSwitch):
             self._set_config_VIFOpenVSwitch(instance, vif, conf)
         elif isinstance(vif, osv_vifs.VIFVHostUser):
-            self._set_config_VIFVHostUser(instance, vif, conf)
+            self._set_config_VIFVHostUser(instance, vif, conf, vnic_type)
         elif isinstance(vif, osv_vifs.VIFHostDevice):
             self._set_config_VIFHostDevice(instance, vif, conf)
         else:
