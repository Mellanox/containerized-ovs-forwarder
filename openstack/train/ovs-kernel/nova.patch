diff --git a/nova/network/os_vif_util.py b/nova/network/os_vif_util.py
index 9b76ef3c81..c1e380688a 100644
--- a/nova/network/os_vif_util.py
+++ b/nova/network/os_vif_util.py
@@ -353,6 +353,21 @@ def _nova_to_osvif_vif_ovs(vif):
             port_profile=_get_ovs_representor_port_profile(vif),
             plugin="ovs")
         _set_representor_datapath_offload_settings(vif, obj)
+
+    # Add support for virtio_forwrder port
+    elif vnic_type == model.VNIC_TYPE_VIRTIO_FORWARDER:
+        obj = _get_vif_instance(
+            vif,
+            objects.vif.VIFVHostUser,
+            port_profile=_get_ovs_representor_port_profile(vif),
+            plugin="ovs",
+            vif_name=vif_name)
+        _set_representor_datapath_offload_settings(vif, obj)
+        obj.mode="server"
+        obj.path=("/var/lib/vhost_sockets/sock%s" % vif['id'])[:39]
+        if vif["network"]["bridge"] is not None:
+            obj.network.bridge = vif["network"]["bridge"]
+
     elif _is_firewall_required(vif) or vif.is_hybrid_plug_enabled():
         obj = _get_vif_instance(
             vif,
diff --git a/nova/virt/libvirt/config.py b/nova/virt/libvirt/config.py
index 39c4da8847..a91d444f2d 100644
--- a/nova/virt/libvirt/config.py
+++ b/nova/virt/libvirt/config.py
@@ -82,6 +82,30 @@ class LibvirtConfigObject(object):
         return xml_str
 
 
+class LibvirtConfigQemuCommandLine(LibvirtConfigObject):
+
+    def __init__(self, **kwargs):
+        super(LibvirtConfigQemuCommandLine, self).__init__(
+            root_name='commandline', ns_prefix="qemu",
+            ns_uri='http://libvirt.org/schemas/domain/qemu/1.0',
+            **kwargs)
+        self.args = {}
+        self.net_alias_name = ""
+
+    def format_dom(self):
+        domain = super(LibvirtConfigQemuCommandLine, self).format_dom()
+        for arg,value in self.args.items():
+            set_arg = self._new_node("arg")
+            set_arg.set("value", "-set")
+            domain.append(set_arg)
+            new_arg = self._new_node("arg")
+            new_arg.set("value", "device.%s.%s=%s" % (self.net_alias_name,
+                                                      arg, value))
+            domain.append(new_arg)
+
+        return domain
+
+
 class LibvirtConfigCaps(LibvirtConfigObject):
 
     def __init__(self, **kwargs):
@@ -1584,6 +1608,8 @@ class LibvirtConfigGuestInterface(LibvirtConfigGuestDevice):
         self.vlan = None
         self.device_addr = None
         self.mtu = None
+        self.vhost_net_alias = ''
+        self.vdpa = False
 
     @property
     def uses_virtio(self):
@@ -1618,6 +1644,8 @@ class LibvirtConfigGuestInterface(LibvirtConfigGuestDevice):
                 drv_elem.set('rx_queue_size', str(self.vhost_rx_queue_size))
             if self.vhost_tx_queue_size is not None:
                 drv_elem.set('tx_queue_size', str(self.vhost_tx_queue_size))
+            if self.vdpa:
+                drv_elem.set('page_per_vq', 'on')
 
             if (drv_elem.get('name') or drv_elem.get('queues') or
                 drv_elem.get('rx_queue_size') or
@@ -1650,6 +1678,9 @@ class LibvirtConfigGuestInterface(LibvirtConfigGuestDevice):
             dev.append(etree.Element("source", type=self.vhostuser_type,
                                      mode=self.vhostuser_mode,
                                      path=self.vhostuser_path))
+            if self.vdpa and self.vhost_net_alias:
+                dev.append(etree.Element("alias", name=self.vhost_net_alias))
+
         elif self.net_type == "bridge":
             dev.append(etree.Element("source", bridge=self.source_dev))
             if self.script is not None:
@@ -2605,6 +2636,7 @@ class LibvirtConfigGuest(LibvirtConfigObject):
         self.idmaps = []
         self.perf_events = []
         self.launch_security = None
+        self.qemu_args = []
 
     def _format_basic_props(self, root):
         root.append(self._text_node("uuid", self.uuid))
@@ -2684,6 +2716,10 @@ class LibvirtConfigGuest(LibvirtConfigObject):
             devices.append(dev.format_dom())
         root.append(devices)
 
+    def _format_qemu_args(self, root):
+        for qemu_arg in self.qemu_args:
+            root.append(qemu_arg.format_dom())
+
     def _format_idmaps(self, root):
         if len(self.idmaps) == 0:
             return
@@ -2735,6 +2771,8 @@ class LibvirtConfigGuest(LibvirtConfigObject):
 
         self._format_sev(root)
 
+        self._format_qemu_args(root)
+
         return root
 
     def _parse_basic_props(self, xmldoc):
diff --git a/nova/virt/libvirt/designer.py b/nova/virt/libvirt/designer.py
index 7bafd47bbc..b5caee0948 100644
--- a/nova/virt/libvirt/designer.py
+++ b/nova/virt/libvirt/designer.py
@@ -144,7 +144,8 @@ def set_vif_host_backend_direct_config(conf, devname, mode="passthrough"):
 
 
 def set_vif_host_backend_vhostuser_config(conf, mode, path, rx_queue_size,
-                                          tx_queue_size):
+                                          tx_queue_size, net_alias=None,
+                                          vdpa=False):
     """Populate a LibvirtConfigGuestInterface instance
     with host backend details for vhostuser socket.
 
@@ -158,6 +159,9 @@ def set_vif_host_backend_vhostuser_config(conf, mode, path, rx_queue_size,
         conf.vhost_rx_queue_size = rx_queue_size
     if tx_queue_size:
         conf.vhost_tx_queue_size = tx_queue_size
+    if vdpa:
+        conf.vdpa = True
+        conf.vhost_net_alias = net_alias
 
 
 def set_vif_mtu_config(conf, mtu):
diff --git a/nova/virt/libvirt/driver.py b/nova/virt/libvirt/driver.py
index f4df91e494..954f1fb9f7 100644
--- a/nova/virt/libvirt/driver.py
+++ b/nova/virt/libvirt/driver.py
@@ -4681,6 +4681,13 @@ class LibvirtDriver(driver.ComputeDriver):
 
         return dev
 
+    def _get_guest_qemu_commandline(self, net_alias, **kwargs):
+        qemu_config = vconfig.LibvirtConfigQemuCommandLine()
+        qemu_config.net_alias_name = net_alias
+        qemu_config.args = kwargs
+
+        return qemu_config
+
     def _get_guest_config_meta(self, instance):
         """Get metadata config for guest."""
 
@@ -5826,6 +5833,16 @@ class LibvirtDriver(driver.ComputeDriver):
                 instance, vif, image_meta,
                 flavor, virt_type, self._host)
             guest.add_device(config)
+            if vif.get("vnic_type") == network_model.VNIC_TYPE_VIRTIO_FORWARDER:
+                if (vif.get("network") and vif.get("network").get("meta") and
+                        vif.get("network").get("meta").get("mtu")):
+
+                    # As a workaround, we have to set mtu_host in xml file for
+                    # virtio-forwarder interface, we may revist it if needed
+                    args_dict = {"host_mtu": vif["network"]["meta"]["mtu"]}
+                    qemu_args = self._get_guest_qemu_commandline(config.vhost_net_alias,
+                                                                 **args_dict)
+                    guest.qemu_args.append(qemu_args)
 
         self._create_consoles(virt_type, guest, instance, flavor, image_meta)
 
diff --git a/nova/virt/libvirt/vif.py b/nova/virt/libvirt/vif.py
index c03548d007..ffed0d773d 100644
--- a/nova/virt/libvirt/vif.py
+++ b/nova/virt/libvirt/vif.py
@@ -501,7 +501,7 @@ class LibvirtGenericVIFDriver(object):
         conf.target_dev = vif.vif_name
         self._set_config_VIFPortProfile(instance, vif, conf)
 
-    def _set_config_VIFVHostUser(self, instance, vif, conf, host=None):
+    def _set_config_VIFVHostUser(self, instance, vif, conf, host=None, vnic_type=""):
         # TODO(sahid): We should never configure a driver backend for
         # vhostuser interface. Specifically override driver to use
         # None. This can be removed when get_base_config will be fixed
@@ -509,8 +509,14 @@ class LibvirtGenericVIFDriver(object):
         conf.driver_name = None
 
         rx_queue_size, tx_queue_size = self._get_virtio_queue_sizes(host)
-        designer.set_vif_host_backend_vhostuser_config(
-            conf, vif.mode, vif.path, rx_queue_size, tx_queue_size)
+        if vnic_type == network_model.VNIC_TYPE_VIRTIO_FORWARDER:
+            net_alias = "ua-vdpa-%s" % vif.id[:12]
+            designer.set_vif_host_backend_vhostuser_config(
+                conf, vif.mode, vif.path, rx_queue_size, tx_queue_size,
+                net_alias, vdpa=True)
+        else:
+            designer.set_vif_host_backend_vhostuser_config(
+                conf, vif.mode, vif.path, rx_queue_size, tx_queue_size)
 
     def _set_config_VIFHostDevice(self, instance, vif, conf, host=None):
         if vif.dev_type == osv_fields.VIFHostDeviceDevType.ETHERNET:
@@ -570,7 +576,7 @@ class LibvirtGenericVIFDriver(object):
         elif isinstance(vif, osv_vifs.VIFOpenVSwitch):
             self._set_config_VIFOpenVSwitch(instance, vif, conf, host)
         elif isinstance(vif, osv_vifs.VIFVHostUser):
-            self._set_config_VIFVHostUser(instance, vif, conf, host)
+            self._set_config_VIFVHostUser(instance, vif, conf, host, vnic_type)
         elif isinstance(vif, osv_vifs.VIFHostDevice):
             self._set_config_VIFHostDevice(instance, vif, conf, host)
         else:
