diff --git a/vif_plug_ovs/constants.py b/vif_plug_ovs/constants.py
index 1eece80..c14ba4e 100644
--- a/vif_plug_ovs/constants.py
+++ b/vif_plug_ovs/constants.py
@@ -24,5 +24,8 @@ PLATFORM_WIN32 = 'win32'
 
 OVS_DPDK_INTERFACE_TYPE = 'dpdk'
 
+OVS_VDPA_TYPE = 'dpdkvdpa'
+OVS_VDPA_PREFIX = 'vdp'
+
 # Neutron dead VLAN.
 DEAD_VLAN = 4095
diff --git a/vif_plug_ovs/linux_net.py b/vif_plug_ovs/linux_net.py
index 20baab3..4841f4b 100644
--- a/vif_plug_ovs/linux_net.py
+++ b/vif_plug_ovs/linux_net.py
@@ -389,3 +389,14 @@ def get_pf_pci_from_vf(vf_pci):
     """
     physfn_path = os.readlink("/sys/bus/pci/devices/%s/physfn" % vf_pci)
     return os.path.basename(physfn_path)
+
+
+def get_phys_port_name(representor):
+    """Get physical port name for the represntor
+
+    :param: representor: the representor name
+    """
+    phys_port_name_file = "/sys/class/net/%s/phys_port_name" % representor
+    with open(phys_port_name_file, 'r') as f:
+        phys_port_name = f.readline().strip()
+    return phys_port_name
diff --git a/vif_plug_ovs/ovs.py b/vif_plug_ovs/ovs.py
index 9516f79..cdc860b 100644
--- a/vif_plug_ovs/ovs.py
+++ b/vif_plug_ovs/ovs.py
@@ -23,6 +23,7 @@ from os_vif.internal.ip.api import ip as ip_lib
 from os_vif import objects
 from os_vif import plugin
 from oslo_config import cfg
+from ovs_module.containerovsdb import ovsdb_lib as containerovsdb_lib
 
 from vif_plug_ovs import constants
 from vif_plug_ovs import exception
@@ -88,6 +89,14 @@ class OvsPlugin(plugin.PluginBase):
     def __init__(self, config):
         super(OvsPlugin, self).__init__(config)
         self.ovsdb = ovsdb_lib.BaseOVS(self.config)
+        self._container_ovs = None
+
+    @property
+    def container_ovs(self):
+        if not self._container_ovs:
+            self._container_ovs = containerovsdb_lib.BaseOVS(
+                connection='tcp:127.0.0.1:6000')
+        return self._container_ovs
 
     @staticmethod
     def gen_port_name(prefix, id):
@@ -176,6 +185,36 @@ class OvsPlugin(plugin.PluginBase):
             return datapath
         return profile.datapath_type
 
+    @staticmethod
+    def _get_vif_datapath_offload(vif):
+        profile = vif.port_profile
+        if hasattr(profile, 'datapath_offload') and profile.datapath_offload:
+            return profile.datapath_offload
+
+    def _plug_virtio_forwarder(self, vif, instance_info):
+        dp_rep = self._get_vif_datapath_offload(vif)
+        vif_name = OvsPlugin.gen_port_name(
+            constants.OVS_VDPA_PREFIX, vif.id)
+        pci_slot = dp_rep.representor_address
+        pf_pci = linux_net.get_pf_pci_from_vf(pci_slot)
+        pf0_pci = pf_pci[:-1] + "0"
+        vf_num = linux_net.get_vf_num_by_pci_address(pci_slot)
+        pf_ifname = linux_net.get_ifname_by_pci_address(
+            pci_slot, pf_interface=True, switchdev=True)
+        representor = linux_net.get_representor_port(pf_ifname, vf_num)
+        phys_port_name = linux_net.get_phys_port_name(representor)
+        mtu = self._get_mtu(vif)
+
+        # create representor port
+        self._create_vif_port(vif, representor, instance_info)
+
+        # create vdpa port
+        self.container_ovs.create_ovs_vif_port("br0-ovs", vif_name,
+                                               constants.OVS_VDPA_TYPE,
+                                               pf0_pci, pci_slot,
+                                               phys_port_name, vif.path,
+                                               mtu=mtu)
+
     def _plug_vhostuser(self, vif, instance_info):
         self.ovsdb.ensure_ovs_bridge(
             vif.network.bridge, self._get_vif_datapath_type(
@@ -294,10 +333,29 @@ class OvsPlugin(plugin.PluginBase):
             else:
                 self._plug_vif_windows(vif, instance_info)
         elif isinstance(vif, objects.vif.VIFVHostUser):
-            self._plug_vhostuser(vif, instance_info)
+            if self._get_vif_datapath_offload(vif):
+                self._plug_virtio_forwarder(vif, instance_info)
+            else:
+                self._plug_vhostuser(vif, instance_info)
         elif isinstance(vif, objects.vif.VIFHostDevice):
             self._plug_vf(vif, instance_info)
 
+    def _unplug_virtio_forwarder(self, vif, instance_info):
+        vif_name = OvsPlugin.gen_port_name(constants.OVS_VDPA_PREFIX, vif.id)
+        dp_rep = self._get_vif_datapath_offload(vif)
+        pci_slot = dp_rep.representor_address
+        vf_num = linux_net.get_vf_num_by_pci_address(pci_slot)
+        pf_ifname = linux_net.get_ifname_by_pci_address(
+            pci_slot, pf_interface=True, switchdev=True)
+        representor = linux_net.get_representor_port(pf_ifname, vf_num)
+
+        # delete representor port
+        self.ovsdb.delete_ovs_vif_port(vif.network.bridge, representor,
+                                       delete_netdev=False)
+
+        # delete vdpa port
+        self.container_ovs.delete_ovs_vif_port("br0-ovs", vif_name)
+
     def _unplug_vhostuser(self, vif, instance_info):
         self.ovsdb.delete_ovs_vif_port(vif.network.bridge,
             OvsPlugin.gen_port_name(
@@ -369,6 +427,9 @@ class OvsPlugin(plugin.PluginBase):
             else:
                 self._unplug_vif_windows(vif, instance_info)
         elif isinstance(vif, objects.vif.VIFVHostUser):
-            self._unplug_vhostuser(vif, instance_info)
+            if self._get_vif_datapath_offload(vif):
+                self._unplug_virtio_forwarder(vif, instance_info)
+            else:
+                self._unplug_vhostuser(vif, instance_info)
         elif isinstance(vif, objects.vif.VIFHostDevice):
             self._unplug_vf(vif)
